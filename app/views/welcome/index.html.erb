<div class="container-fluid">
  <div class="row">
    <div class="col-xs-12 col-md-3" id="data">
      <h2>Crime in Chicago by Police Beats</h2>

      <hr />
      <%= select('Beats', 'Beats', @beats, {include_blank:true}, {class:'form-control'}) %>
      <hr />

      <h4 id="header">Click on a beat for additional info, or select a beat from the dropdown menu.</h4>
      <h5 id="reports"></h5>

      <div class="list-group" id="output"></div>
      <button type="button" class="btn btn-default btn-lg" disabled="disabled">More</button>

      <hr />
      <p>All data collected from <a href="https://data.cityofchicago.org/">
        City of Chicago Data Portal</a>.</p>
      <hr />

    </div>
    <div class="col-xs-12 col-md-9" id="map-container" style="padding:0px">
      <div id="map"></div>
    </div>
  </div>
</div>

<script type="text/javascript">
    var map = L.map('map', {attributionControl: false}).setView([41.82, -87.75], 11);

    // control that shows state info on hover
    var info = L.control();

    // contains severity data
    var severity = <%=raw(@frequency.to_json)%>;

    // contains info for the legend
    var levels = <%=raw(@levels.to_json)%>;

    // displays info on severity limits
    var legend = L.control({position: 'bottomright'});

    // the last beat element to be selected
    var last = null;

    // select box containing a list of beats
    var select = document.getElementById('Beats_Beats');

    // Title for a beat
    var header = document.getElementById("header");

    // Subtitle for a beat listing crime report count
    var reports = document.getElementById("reports");

    select.onchange = function() {
        updateHeader(this.value);
    };

    info.onAdd = function (map) {
        this._div = L.DomUtil.create('div', 'info');
        this.update();
        return this._div;
    };

    info.update = function (props) {
        this._div.innerHTML = '<h4>District / Beat</h4>' +
            (props ? 'Beat ' + props.beat + ' has had ' + severity[props.beat] + ' reported crimes in 2014.' : 'Select a beat');
    };

    info.addTo(map);

    //L.tileLayer('http://otile1.mqcdn.com/tiles/1.0.0/sat/{z}/{x}/{y}.jpg').addTo(map);
    L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);

    function style(feature) {
        return {
            weight: 1,
            opacity: 1,
            color: '#000',
            fillOpacity: 0.7,
            fillColor: getColor(severity[feature.properties.beat])
        };
    }

    function highlightFeature(e) {
        //geojson.resetStyle();

        var layer = e.target;

        if (last) resetHighlight(last);
        last = e;
        updateHeader(layer.feature.properties.beat);

        select.value = layer.feature.properties.beat;

        layer.setStyle({
            weight: 4,
            color: '#0F0',
            fillOpacity: 0.7
        });

        if (!L.Browser.ie && !L.Browser.opera) {
            layer.bringToFront();
        }

        info.update(layer.feature.properties);
    }

    function resetHighlight(e) {
        geojson.resetStyle(e.target);
        info.update();
    }

    function onEachFeature(feature, layer) {
        layer.on({
            //mouseover: highlightFeature,
            //mouseout: resetHighlight,
            click: highlightFeature
        });
    }

    function getColor(d) {
        return d > levels[1] ? '#800026':
               d > levels[2] ? '#BD0026':
               d > levels[3] ? '#FC4E2A':
               d > levels[4] ? '#FEB24C':
                               '#FFEDA0';
    }

    function updateHeader(beat) {
        header.innerHTML = "Beat " + beat;
        reports.innerHTML = severity[beat] + " reported crimes in 2014";
    }

    legend.onAdd = function (map) {
        var div = L.DomUtil.create('div', 'info legend');

        div.innerHTML += '<h4>Crimes per Beat</h4>'

        for (var i = 0; i < levels.length; i++) {
            div.innerHTML +=
                '<i style="background:' + getColor(levels[i]) + '"></i> ' +
                    (levels[i+1] ? levels[i+1]: '0') + '&ndash;' + levels[i] + '<br />';
        }
        return div;
    };

    legend.addTo(map);

    geojson = L.geoJson(policeData, {
        style: style,
        onEachFeature: onEachFeature
    }).addTo(map);
</script>
